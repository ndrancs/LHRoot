#!/system/bin/sh
# Terminal Magisk Mod Template
# by veez21 @ xda-developers


# Magisk Module ID **
ID="lhroot"

# Detect root
_name=$(basename $0)
ls /data >/dev/null 2>&1 || { echo "$ID needs to run as root!"; echo "type 'su' then '$_name'"; exit 1; }

# Magisk Mod Directory
[ -d "/sbin/.magisk" ] && MOUNTPATH="/sbin/.magisk/modules" || MOUNTPATH="$(find /dev -mindepth 2 -maxdepth 2 -type d -name ".magisk")/modules"
MODDIR="$MOUNTPATH/$ID"
[ ! -d $MODDIR ] && { echo "Module not detected!"; exit 1; }

if command -v busybox &> /dev/null
then
    _bb=$(command -v busybox)
fi

# Set directory for each chroot
alpine="/data/alpine"
debian="/data/debian"
ubuntu="/data/ubuntu"
archlinux="/data/arch"
kali="/data/kali"
fedora="/data/fedora"
manjaro="/data/manjaro"
void="/data/void"

tmp="/data/local/tmp"

# Load mod-util.sh
. $MODDIR/mod-util.sh || exit $?

# Set Log Files
mount -o remount,rw /cache 2>/dev/null
mount -o rw,remount /cache 2>/dev/null
# > Logs should go in this file
LOG=/data/local/tmp/$ID.log
oldLOG=/data/local/tmp/$ID-old.log
# > Verbose output goes here
VERLOG=/data/local/tmp/$ID-verbose.log
oldVERLOG=/data/local/tmp/$ID-verbose-old.log
stdoutLOG=$MODDIR/logs/$ID-STDOUT.log
oldstdoutLOG=$MODDIR/logs/$ID-STDOUT-old.log

# Start Logging verbosely
mv -f $VERLOG $oldVERLOG 2>/dev/null; mv -f $LOG $oldLOG 2>/dev/null; mv -f $stdoutLOG $oldstdoutLOG 2>/dev/null
# exec 3>&1
# exec 1>$stdoutLOG
set -x 2>$VERLOG

# Main
# > You can start your MOD here.
# > You can add functions, variables & etc.
# > Rather than editing the default vars above.

checkdir () {
    if [ -d "$1" ]; then
        first=1
        echo "skipping downloading"
    fi
}

alpine () {
	folder=$alpine
	tarball="$tmp/alpine.tar.gz"
	archurl=
	checkdir "$folder"
    if [ "$first" != 1 ]; then
        if [ ! -f $tarball ]; then
            echo "Downloading Rootfs, please wait..."
            case $ARCH in
                arm)
                    archurl="armv7" ;;
                arm64)
                    archurl="aarch64" ;;
                x86)
                    archurl="x86" ;;
                x64)
                    archurl="x86_64" ;;
                *)
                    abort "unknown arch" ;;
            esac
            wget "https://dl-cdn.alpinelinux.org/alpine/v3.17/releases/${archurl}/alpine-minirootfs-3.17.2-${archurl}.tar.gz" -qO $tarball & e_spinner
        fi
        mkdir -p "$folder"
        cd "$folder"
        echo "Decompressing Rootfs..."
        tar xf ${tarball} 2> /dev/null||:
        cd $HOME
    fi
    echo "Removing rootfs tarball for some space"
    rm $tarball
    echo "You can now launch Alpine with the bootlinux script"
}

debian () {
    folder=$debian
    checkdir "$folder"
    tarball="$tmp/debian.tar.xz"
    archurl=
    if [ "$first" != 1 ]; then
        if [ ! -f $tarball ]; then
            echo "Downloading Rootfs, please wait..."
            case $ARCH in
                arm)
                    archurl="armhf" ;;
                arm64)
                    archurl="arm64" ;;
                x86)
                    archurl="i386" ;;
                x64)
                    archurl="amd64" ;;
                *)
                    abort "unknown arch" ;;
            esac
            wget "https://raw.githubusercontent.com/FerryAr/lhroot-repo/main/Rootfs/Debian/${archurl}/debian-rootfs-${archurl}.tar.xz" -qO $tarball & e_spinner
        fi
        mkdir -p "$folder"
        cd "$folder"
        echo "Decompressing Rootfs..."
        tar xfJ ${tarball} 2> /dev/null||:
        cd $HOME
    fi
    echo "Removing rootfs tarball for some space"
    rm $tarball
    echo "You can now launch Debian with the bootlinux script"
}

ubuntu () {
    folder=$ubuntu
    checkdir "$folder"
    tarball="$tmp/ubuntu.tar.xz"
    archurl=
    if [ "$first" != 1 ]; then
        if [ ! -f $tarball ]; then
            echo "Downloading Rootfs, please wait..."
            case $ARCH in
                arm)
                    archurl="armhf" ;;
                arm64)
                    archurl="arm64" ;;
                x86)
                    archurl="i386" ;;
                x64)
                    archurl="amd64" ;;
                *)
                    abort "unknown arch"
            esac
            wget "https://raw.githubusercontent.com/FerryAr/lhroot-repo/main/Rootfs/Ubuntu/${archurl}/ubuntu-rootfs-${archurl}.tar.xz" -qO $tarball & e_spinner
        fi
        mkdir -p "$folder"
        cd "$folder"
        echo "Decompressing Rootfs..."
        tar xfJ ${tarball} 2> /dev/null||:
        cd $HOME
    fi
    echo "Removing rootfs tarball for some space"
    rm $tarball
    echo "You can now launch Ubuntu with the bootlinux script"
}

void () {
    folder=$void
    checkdir "$folder"
    tarball="$tmp/void.tar.xz"
    archurl=
    if [ "$first" != 1 ]; then
        if [ ! -f $tarball ]; then
            echo "Downloading Rootfs, please wait..."
            case $ARCH in
                arm)
                    archurl="armhf" ;;
                arm64)
                    archurl="arm64" ;;
                x86)
                    archurl="i386" ;;
                x64)
                    archurl="amd64" ;;
                *)
                    abort "unknown arch" ;;
            esac
            wget "https://raw.githubusercontent.com/FerryAr/lhroot-repo/main/Rootfs/Void/${archurl}/void-rootfs-${archurl}.tar.xz" -qO $tarball & e_spinner
        fi
        mkdir -p "$folder"
        cd "$folder"
        echo "Decompressing Rootfs..."
        tar xfJ ${tarball} 2> /dev/null||:
        cd $HOME
    fi
    echo "Removing rootfs tarball for some space"
    rm $tarball
    echo "You can now launch Void with bootlinux script"
}

archlinux () {
    folder="/data/arch"
    checkdir "$folder"
    tarball="$tmp/arch.tar.gz"
    if [ "$first" != 1 ]; then
        if [ ! -f $tarball ]; then
            echo "Downloading Rootfs, please wait..."
            archurl=
            case $ARCH in
                arm)
                    archurl="arm" ;;
                arm64)
                    archurl="aarch64" ;;
                x64)
                    archurl="x86_64" ;;
                *)
                    abort "unknown arch" ;;
            esac
            wget "https://github.com/termux/proot-distro/releases/download/v3.10.0/archlinux-${archurl}-pd-v3.10.0.tar.xz" -qO $tarball & e_spinner
        fi
        mkdir -p "$folder"
        cd "$folder"
        echo "Decompressing Rootfs..."
        tar xfJ ${tarball}  2> /dev/null||:
        mv "$folder/archlinux-${archurl}/*" "$folder"
        rm -f "$folder/archlinux-${archurl}"
        cd $HOME
    fi
    echo "Removing rootfs tarball for some space"
    rm $tarball
    echo "You can now launch launch Arch Linux with the bootlinux script"
}

manjaro () {
    folder="/data/manjaro"
    checkdir "$folder"
    tarball="$tmp/manjaro.tar.xz"
    if [ "$first" != 1 ]; then
        if [ ! -f $tarball ]; then
            echo "Downloading Rootfs, please wait..."
            case $ARCH in
                arm64)
                    archurl="https://github.com/termux/proot-distro/releases/download/v3.10.0/manjaro-aarch64-pd-v3.10.0.tar.xz" ;;
                *)
                    abort "ERROR: This distro only supports aarch64." ;;
            esac
            wget $archurl -qO $tarball & e_spinner
        fi
        mkdir -p "$folder"
        cd "$folder"
        echo "Decompressing Rootfs..."
        tar xfJ ${tarball} 2> /dev/null||:
        mv "$folder/manjaro-${archurl}/*" "$folder"
        rm -f "$folder/manjaro-${archurl}"
        cd $HOME
    fi
    echo "Removing rootfs tarball for some space"
    rm $tarball
    echo "You can now launch Manjaro with the bootlinux script"
}

kali () {
    folder="/data/kali"
    checkdir "$folder"
    tarball="$tmp/kali.tar.xz"
    if [ "$first" != 1 ]; then
        if [ ! -f $tarball ]; then
            echo "Downloading Rootfs, please wait..."
            archurl=
            case $ARCH in
                arm)
                    archurl="armhf" ;;
                arm64)
                    archurl="arm64" ;;
                x86)
                    archurl="i386" ;;
                x64)
                    archurl="amd64" ;;
                *)
                    abort "unknown arch" ;;
            esac
            wget "https://raw.githubusercontent.com/FerryAr/lhroot-repo/main/Rootfs/Kali/${archurl}/kali-rootfs-${archurl}.tar.xz" -qO $tarball & e_spinner
        fi
        mkdir -p "$folder"
        cd "$folder"
        echo "Decompressing Rootfs..."
        tar xfJ ${tarball} 2> /dev/null||:
        cd $HOME
    fi
    echo "Removing rootfs tarball for some space"
    rm $tarball
    echo "You can now launch Kali with bootlinux script"
}

fedora () {
    folder="/data/fedora"
    checkdir "$folder"
    tarball="$tmp/fedora.tar.xz"
    if [ "$first" != 1 ]; then
        if [ ! -f $tarball ]; then
            echo "Downloading Rootfs, please wait..."
            case $ARCH in
                arm)
                    archurl="armhf" ;;
                arm64)
                    archurl="arm64" ;;
                x64)
                    archurl="amd64" ;;
                *)
                    abort "unknown/unsupported arch" ;;
            esac
            wget "https://raw.githubusercontent.com/FerryAr/lhroot-repo/main/Rootfs/Fedora/${archurl}/fedora-rootfs-${archurl}.tar.xz" -qO $tarball & e_spinner
        fi
        mkdir -p "$folder"
        cd "$folder"
        echo "Decompressing Rootfs..."
        tar xfJ ${tarball} 2> /dev/null||:
        cd $HOME
    fi
    echo "Removing rootfs tarball for some space..."
    rm $tarball
    echo "You can now launch Fedora with bootlinux script"
}

install_chroot () {
    clear
    while true; do
        echo "$div"
        title_div "Install which distro?"
        echo "$div"
        echo "0. Back"
        echo "1. Arch Linux"
        echo "2. Alpine Linux"
        echo "3. Debian"
        echo "4. Fedora"
        echo "5. Kali Linux"
        echo "6. Manjaro"
        echo "7. Ubuntu"
        echo "8. Void Linux"
        read -r choice?'--> '
        echo " "
        case $choice in
            0) break 3;;
            1) archlinux ;;
            2) alpine ;;
            3) debian ;;
            4) fedora ;;
            5) kali ;;
            6) manjaro ;;
            7) ubuntu ;;
            8) void ;;
        esac
    done
}

remove_chroot () {
    clear
    installed=false
    while true; do
        echo "$div"
        title_div "Remove which distro?"
        echo "$div"
        echo "0. Back"
        echo "1. Arch Linux"
        echo "2. Alpine Linux"
        echo "3. Debian"
        echo "4. Fedora"
        echo "5. Kali Linux"
        echo "6. Manjaro"
        echo "7. Ubuntu"
        echo "8. Void Linux"
        read -r choice?'--> '
        echo " "
        case $choice in
            0) break 3;;
            1)
                installed=true
                lmount=$archlinux
                ;;
            2) 
                installed=true
                lmount=$alpine
                ;;
            3)
                installed=true
                lmount=$debian
                ;;
            4)
                installed=true
                lmount=$fedora
                ;;
            5)
                installed=true
                lmount=$kali
                ;;
            6)
                installed=true
                lmount=$manjaro
                ;;
            7)
                installed=true
                lmount=$ubuntu
                ;;
            8)
                installed=true
                lmount=$void
                ;;
        esac
        if [ $installed ] && [ -d $lmount ]; then
            killlinux
	    if [ "$(mountpoint $lmount/dev 2> /dev/null | grep 'is a')" ]; then
	    	echo "/dev is still mounted, please reboot your device."
		sleep 1
		echo "After reboot you can rerun this script or remove chroot yourself with 'rm -rf /data/<chroot folder> command'"
		exit 1;
	    else
		echo "Check if any mountpoints are still mounted on the chroot folder."
		sleep 1;
		echo "To ensure that all mountpoints are unmounted, a reboot is recommended."
		sleep 1;
		echo "After reboot you can rerun this script or remove chroot yourself with 'rm -rf /data/<chroot folder> command'"
		sleep 30;
		rm -rf $lmount
		echo "Chroot removed"
	    fi
        else
            echo "No chroots installed"
        fi
    done
}

mod_head
echo " "

test_connection || abort "ERROR: lhroot requires internet access."

while true; do
    clear
    echo "$div"
    title_div "Chroot Installer"
    echo "$div"
    title_div "Choose Option"
    echo "$div"
    echo "1. Install Chroot"
    echo "2. Remove Chroot"
    echo "q. quit"
    read -r choice?'--> '
    echo " "
    case $choice in
        1) install_chroot ;;
        2) remove_chroot ;;
        q) exit 0 ;;
    esac
done
